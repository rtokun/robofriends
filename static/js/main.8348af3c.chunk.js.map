{"version":3,"sources":["Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/App.js","serviceWorker.js","index.js","robots.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","e","Scroll","props","style","overflow","border","height","children","ErrorBoundry","state","hasError","error","errorInfo","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","json","filtered","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","username","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8348af3c.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img src={`https://robohash.org/${id}test?200x200`} alt=''/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return <Card\n                        key={i}\n                        id={user.id}\n                        name={user.name}\n                        email={user.email}\n                    />\n                })\n            }\n        </div>\n    );\n};\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n\n    return (\n        <input\n            className='pa3 ba--green bg-light-blue'\n            type='search'\n            placeholder='search robots'\n            onChange={(e) => {\n                searchChange(e)\n            }}\n        />\n    );\n};\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return <div style={{\n        overflow: 'scroll',\n        border: '5px solid black',\n        height: '500px'\n    }}>\n        {props.children}\n    </div>;\n};\n\nexport default Scroll;","import React, {Component} from 'react';\n\nclass ErrorBoundry extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Oooooops something bad happened</h1>\n        }\n\n        return this.props.children;\n    }\n\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from \"../Components/CardList\";\nimport SearchBox from \"../Components/SearchBox\";\nimport Scroll from \"../Components/Scroll\";\nimport './App.css'\nimport ErrorBoundry from \"../Components/ErrorBoundry\";\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            robots: [],\n            searchField: ''\n        }\n    }\n\n    async componentDidMount() {\n        const robots = await fetch('https://jsonplaceholder.typicode.com/users');\n        this.setState({\n            robots: await robots.json()\n        })\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchField: event.target.value});\n    };\n\n    render() {\n        const {searchField, robots} = this.state;\n        const filtered = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField)\n        });\n        return !robots.length ?\n            (<h1 className='tc'>Loading</h1>)\n            :\n            (<div className='tc'>\n                <h1 className='f2'>Robofriends</h1>\n                <SearchBox searchChange={this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList robots={filtered}/>\n                    </ErrorBoundry>\n                </Scroll>\n            </div>);\n    }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Containers/App'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nimport {robots} from \"./robots\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App robots={robots}/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n"],"sourceRoot":""}